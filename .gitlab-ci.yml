image: node:12

stages:
    - dependencies
    - build
    - containerization
    - deploy
    
cache:
    paths:
        - node_modules/

install_dependencies:
    stage: dependencies
    script:
        - npm install
    artifacts:
        paths:
            - node_modules/

build:
    stage: build 
    script:
        - docker build -t n_almacenes .
        #- docker image rm my-registry/my-application

register_image:
    stage: containerization
    variables:
        SHA : $CI_COMMIT_SHA
    script:
        - docker tag n_almacenes $DOCKER_SERVER/n_almacenes:$SHA
        - docker tag n_almacenes $DOCKER_SERVER/n_almacenes:latest
        - docker push $DOCKER_SERVER/n_almacenes:$SHA
        - docker push $DOCKER_SERVER/n_almacenes:latest
    only:
        - master

deploy_to_desarrollo:
    stage: deploy
    variables:
        MYSQL_SERVER: $PROD_MYSQL_SERVER 
        MYSQL_USER: $DESA_MYSQL_USER
        MYSQL_PW: $DESA_MYSQL_PASS
        MYSQL_DB: $DESA_MYSQL_DB
        MYSQL_PORT: $DESA_MYSQL_PORT
        APP_PORT: $DESA_APP_PORT
    script: 
        - docker-compose down 
        - docker-compose up -d --build
        - echo $PROD_MYSQL_SERVER
        - echo $DESA_APP_PORT 
    only:
        - desarrollo
    tags: 
        - desarrollo

deploy_to_prod:
    stage: deploy
    variables:
        MYSQL_SERVER: $PROD_MYSQL_SERVER 
        MYSQL_USER: $DESA_MYSQL_USER
        MYSQL_PW: $DESA_MYSQL_PASS
        MYSQL_DB: $DESA_MYSQL_DB
        MYSQL_PORT: $DESA_MYSQL_PORT
    script: 
        - echo $PROD_MYSQL_SERVER 
        - docker-compose down 
        - docker-compose up -d --build
    only:
        - master
    when: manual
    tags: 
        - master
